generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  firstName     String
  lastName      String
  phone         String
  role  Role  @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  ownedHorses Horse[] @relation("HorseOwner")
  services    PerformedService[] @relation("ServiceRecipient")
  customerLessons   Lesson[] @relation("UserLessons")
  monitoredLessons  Lesson[] @relation("MonitorLessons")  

  @@map("user")
}

enum Role{
  CUSTOMER
  OWNER
  ADMIN
  MONITOR
  CAREGIVER
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Horse {
  id     Int     @id @default(autoincrement())
  name    String?
  ownerId Int     @map("owner_id")

  // Relations
  owner   User    @relation("HorseOwner", fields: [ownerId], references: [id])
  lessons Lesson[]
}

model Lesson {
  id      Int      @id @default(autoincrement())
  date  DateTime
  desc    String
  status  Status  @default(PENDING)
  monitorId   Int      @map("monitor_id")
  customerId  Int      @map("customer_id")  
  horseId     Int      @map("horse_id")

  // Relations
  monitor     User     @relation("MonitorLessons", fields: [monitorId], references: [id])
  customer    User     @relation("UserLessons", fields: [customerId], references: [id])
  horse       Horse    @relation(fields: [horseId], references: [id])
  performedServices PerformedService[]
}

enum Status{
  PENDING
  IN_PROGRESS
  FINISHED
}

model Billing {
  id       Int      @id @default(autoincrement())
  date     DateTime
  
  // Relations
  services PerformedService[] 
}

model PerformedService {
  id           Int          @id @default(autoincrement())
  serviceType  Service_type @default(LESSON)
  billingId    Int          @map("billing_id")
  userId       Int          @map("recipient_id")
  serviceId    Int          @map("service_id")

  // Relations
  billing Billing @relation(fields: [billingId], references: [id])
  user    User    @relation("ServiceRecipient", fields: [userId], references: [id])
  lesson  Lesson  @relation(fields: [serviceId], references: [id])
}

enum Service_type{
  CARE
  LESSON
}
